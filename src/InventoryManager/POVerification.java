/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package InventoryManager;

import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import InventoryManager.functions.InventoryService;
import model.PurchaseOrder;
import model.Item;
import java.util.List;

/**
 *
 * @author reymy
 */
public class POVerification extends javax.swing.JFrame {
    
    private List<PurchaseOrder> poList;
    private JFrame previousFrame;
    
    /**
     * Creates new form POVerification
     */
    public POVerification(JFrame parentFrame) {
        this.previousFrame = parentFrame;
        setUndecorated(true);
        initComponents();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        poList = InventoryService.loadPOsFromFile("src/txtFile/po.txt");
        loadPOsToTable();
        
        poTable.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && poTable.getSelectedRow() != -1) {
                int selectedIndex = poTable.getSelectedRow();
                loadItemsOfSelectedPO(selectedIndex);
            }
        });
        
    }
    
    private void loadPOsToTable() {
        DefaultTableModel model = (DefaultTableModel) poTable.getModel();
        model.setRowCount(0);

        for (PurchaseOrder po : poList) {
            Object[] row = {
                po.getPoID(),
                po.getSupplierName(),
                po.getDate(),
                po.getStatus()
            };
            model.addRow(row);
        }
    }
    
    
    private void loadItemsOfSelectedPO(int index) {
        if (index < 0 || index >= poList.size()) return;

        DefaultTableModel model = (DefaultTableModel) itemTable.getModel();
        model.setRowCount(0);

        PurchaseOrder po = poList.get(index);
        String itemID = po.getItemID();

        List<Item> allItems = InventoryManager.functions.InventoryService.loadItemsFromFile("src/txtFile/items.txt");
        for (Item item : allItems) {
            if (item.getItemID().equals(itemID)) {
                Object[] row = {
                    item.getItemID(),
                    item.getItemName(),
                    po.getQuantity(),
                    po.getStatus()
                };
                model.addRow(row);
                return;
            }
        }
        model.addRow(new Object[] {itemID, "Item not found", "", po.getStatus()});
    }

    private int findPOIndexByID(List<PurchaseOrder> list, String poID) {
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).getPoID().equals(poID)) return i;
        }
        return -1;
    }
   
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        closeButton = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        poTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        confirmButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(232, 249, 255));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        closeButton.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        closeButton.setText("X");
        closeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeButtonMouseClicked(evt);
            }
        });

        titleLabel.setFont(new java.awt.Font("Sylfaen", 3, 24)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Purchase Order Verification");

        poTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "PO ID", "Supplier", "Date", "Status"
            }
        ));
        poTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                poTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(poTable);

        itemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item Code", "Item Name", "Quantity Ordered", "Status"
            }
        ));
        jScrollPane2.setViewportView(itemTable);

        confirmButton.setBackground(new java.awt.Color(197, 186, 255));
        confirmButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        confirmButton.setText("Confirm Received");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        backButton.setBackground(new java.awt.Color(196, 217, 255));
        backButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(titleLabel)
                        .addGap(107, 107, 107))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                        .addComponent(jScrollPane2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(confirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)))
                .addGap(17, 17, 17)
                .addComponent(closeButton)
                .addGap(14, 14, 14))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(titleLabel))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(closeButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonMouseClicked
        this.dispose();
    }//GEN-LAST:event_closeButtonMouseClicked

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        int selectedIndex = poTable.getSelectedRow();
        if (selectedIndex != -1) {
            String poID = poList.get(selectedIndex).getPoID();

            boolean success = InventoryManager.functions.InventoryService.confirmAndReceivePO(
                poID, "src/txtFile/po.txt", "src/txtFile/items.txt"
            );

            if (success) {
                // Refresh the list after update
                poList = InventoryManager.functions.InventoryService.loadPOsFromFile("src/txtFile/po.txt");
                loadPOsToTable();
                int newIndex = findPOIndexByID(poList, poID);
                if (newIndex != -1) {
                    poTable.setRowSelectionInterval(newIndex, newIndex);
                    loadItemsOfSelectedPO(newIndex);
                } else {
                    // PO might be filtered out or gone
                    DefaultTableModel model = (DefaultTableModel) itemTable.getModel();
                    model.setRowCount(0);
}

                // Option 1: Clear the item table after confirmation
                DefaultTableModel model = (DefaultTableModel) itemTable.getModel();
                model.setRowCount(0);

                // Option 2: Reselect the same PO by ID if you want (optional)
                // int newIndex = findPOIndexByID(poList, poID);
                // if (newIndex != -1) loadItemsOfSelectedPO(newIndex);

                javax.swing.JOptionPane.showMessageDialog(this, "PO confirmed and stock updated.");
            } else {
                javax.swing.JOptionPane.showMessageDialog(this,
                    "Only Approved POs can be verified or PO was not found.",
                    "Verification Not Allowed", javax.swing.JOptionPane.WARNING_MESSAGE);
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a PO to confirm.");
        }

    }//GEN-LAST:event_confirmButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void poTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_poTableMouseClicked
        int selectedIndex = poTable.getSelectedRow();
        if (selectedIndex != -1) {
            PurchaseOrder po = poList.get(selectedIndex);
            confirmButton.setEnabled("Approved".equalsIgnoreCase(po.getStatus()));
            loadItemsOfSelectedPO(selectedIndex);
        }
    }//GEN-LAST:event_poTableMouseClicked

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JLabel closeButton;
    private javax.swing.JButton confirmButton;
    private javax.swing.JTable itemTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable poTable;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
