/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package FinanceManager;

import FinanceManager.StatusFormat.StatusCellRenderer;
import FinanceManager.functions.ManagePOHelper;
import java.awt.Color;
import java.awt.Component;
import model.PurchaseOrder;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author charl
 */
public class ManagePO extends javax.swing.JFrame {

    /**
     * Creates new form ManagerPO
     */
    private Component previousComponent;
    
    public ManagePO(Component previousComponent) {
        this.previousComponent = previousComponent;
        initComponents();
        loadPOData();
        poTable.getColumnModel().getColumn(9).setCellRenderer(new StatusCellRenderer());
        TableStyle.styleTableHeader(poTable, new Color(166, 214, 214), Color.BLACK);
        
        comboFilter.addItem("All Statuses");
        comboFilter.addItem("Pending");
        comboFilter.addItem("Approved");
        comboFilter.addItem("Rejected");
        comboFilter.addItem("Verified");
        comboFilter.addItem("Flagged");
        comboFilter.addItem("Received");
        comboFilter.addItem("Paid");

        comboFilter.addActionListener(e -> {
            String selectedStatus = (String) comboFilter.getSelectedItem();
            filterPOByStatus(selectedStatus);
        });

    }
    
    public ArrayList<PurchaseOrder> readPOFile() {
        return ManagePOHelper.readPOFile("src/txtFile/po.txt");
    }
    
    public void loadPOData() {
        DefaultTableModel model = (DefaultTableModel) poTable.getModel(); 
        model.setRowCount(0); 

        ArrayList<PurchaseOrder> poList = readPOFile();
        for (PurchaseOrder po : poList) {
            model.addRow(new Object[] {
                po.getPoID(),
                po.getItemID(),
                po.getSupplierID(),
                po.getSupplierName(),
                po.getItem(),
                po.getQuantity(),
                po.getUnitPrice(),
                po.getTotalPrice(),
                po.getDate(),
                po.getStatus(),
                po.getFlagReason()
            });
        }
    }
    
    private void saveTableToFile() {
        List<List<Object>> tableData = new ArrayList<>();
        for (int i = 0; i < poTable.getRowCount(); i++) {
            List<Object> row = new ArrayList<>();
            for (int j = 0; j < poTable.getColumnCount(); j++) {
                row.add(poTable.getValueAt(i, j));
            }
            tableData.add(row);
        }
        ManagePOHelper.savePOData(tableData, "src/txtFile/po.txt");
    }

    private void filterPOByStatus(String statusFilter) {
        DefaultTableModel model = (DefaultTableModel) poTable.getModel();
        model.setRowCount(0); // clear existing rows

        ArrayList<PurchaseOrder> poList = readPOFile();

        for (PurchaseOrder po : poList) {
            if (statusFilter.equals("All Statuses") || po.getStatus().equalsIgnoreCase(statusFilter)) {
                model.addRow(new Object[] {
                    po.getPoID(),
                    po.getItemID(),
                    po.getSupplierID(),
                    po.getSupplierName(),
                    po.getItem(),
                    po.getQuantity(),
                    po.getUnitPrice(),
                    po.getTotalPrice(),
                    po.getDate(),
                    po.getStatus(),
                    po.getFlagReason()
                });
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnReject = new javax.swing.JButton();
        labelTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        poTable = new javax.swing.JTable();
        btnApprove = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        exit = new javax.swing.JLabel();
        comboFilter = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 600));
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 253, 236));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        btnReject.setBackground(new java.awt.Color(255, 207, 207));
        btnReject.setText("Reject");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });

        labelTitle.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        labelTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Icon - checklist.png"))); // NOI18N
        labelTitle.setText("Purchase Order List");

        poTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "PO_ID", "Item ID", "Supplier ID", "Supplier Name", "Item", "Quantity", "Unit Price", "Total Price", "Date", "Status", "Flag Reason"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        poTable.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        jScrollPane1.setViewportView(poTable);

        btnApprove.setBackground(new java.awt.Color(134, 167, 136));
        btnApprove.setForeground(new java.awt.Color(255, 255, 255));
        btnApprove.setText("Approve");
        btnApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveActionPerformed(evt);
            }
        });

        btnEdit.setBackground(new java.awt.Color(255, 226, 226));
        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(255, 255, 204));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        exit.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        exit.setText("X");
        exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitMouseClicked(evt);
            }
        });

        comboFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 35, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(exit)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 945, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(labelTitle)
                                .addGap(223, 223, 223)
                                .addComponent(comboFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(28, 28, 28))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(282, 282, 282)
                .addComponent(btnApprove)
                .addGap(45, 45, 45)
                .addComponent(btnReject)
                .addGap(44, 44, 44)
                .addComponent(btnEdit)
                .addGap(53, 53, 53)
                .addComponent(btnBack)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(exit)
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTitle)
                    .addComponent(comboFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnApprove)
                    .addComponent(btnReject)
                    .addComponent(btnEdit)
                    .addComponent(btnBack))
                .addGap(31, 31, 31))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1012, 620));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        int row = poTable.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row.");
            return;
        }

        String currentStatus = poTable.getValueAt(row, 9).toString();
        if (currentStatus.equalsIgnoreCase("Approved") || 
            currentStatus.equalsIgnoreCase("Rejected") || 
            currentStatus.equalsIgnoreCase("Verified") ||
            currentStatus.equalsIgnoreCase("Flagged") ||
            currentStatus.equalsIgnoreCase("Received") ||
            currentStatus.equalsIgnoreCase("Paid")) {
            JOptionPane.showMessageDialog(this, "This PO has been " + currentStatus + ", so you cannot edit it. Only Pending PO can be edited!");
            return;
        }

        // Extract PO data
        String item = poTable.getValueAt(row, 4).toString();
        String quantity = poTable.getValueAt(row, 5).toString();
        String unitPrice = poTable.getValueAt(row, 6).toString();
        String supplier = poTable.getValueAt(row, 3).toString();

        // Load valid suppliers for this item
        List<String> filteredSuppliers = ManagePOHelper.loadActiveSuppliersForItem(item);

        if (filteredSuppliers.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No active suppliers found for this item.");
            return;
        }

        String[] suppliers = filteredSuppliers.toArray(new String[0]);

        // Show the Edit PO dialog
        EditPOForm dialog = new EditPOForm(this, true);
        dialog.setPOData(item, quantity, unitPrice, supplier, suppliers);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);

        // Update table if user confirms edit
        if (dialog.isConfirmed()) {
            poTable.setValueAt(dialog.getSelectedSupplier(), row, 3);
            poTable.setValueAt(dialog.getUpdatedQuantity(), row, 5);
            poTable.setValueAt(dialog.getUpdatedTotalPrice(), row, 7);
            saveTableToFile();
            JOptionPane.showMessageDialog(this, "Purchase Order updated successfully.");

        }

    }//GEN-LAST:event_btnEditActionPerformed

    private void btnApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveActionPerformed
        // TODO add your handling code here:
        int row = poTable.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to approve.");
            return;
        }
        
        String currentStatus = poTable.getValueAt(row, 9).toString(); 
        if (currentStatus.equalsIgnoreCase("Approved")) {
            JOptionPane.showMessageDialog(this, "This Purchase Order is already approved.");
            return;
        } else if (currentStatus.equalsIgnoreCase("Rejected")) {
            JOptionPane.showMessageDialog(this, "This Purchase Order has been rejected. Cannot approve.");
            return;
        } else if (currentStatus.equalsIgnoreCase("Verified")) {
            JOptionPane.showMessageDialog(this, "This Purchase Order has been verified. Cannot approve.");
            return;
        } else if (currentStatus.equalsIgnoreCase("Flagged")) {
            JOptionPane.showMessageDialog(this, "This Purchase Order has been flagged. Cannot approve.");
            return;
        } else if (currentStatus.equalsIgnoreCase("Received")) {
            JOptionPane.showMessageDialog(this, "This Purchase Order has been received. Cannot approve.");
            return;
        }else if (currentStatus.equalsIgnoreCase("Paid")) {
            JOptionPane.showMessageDialog(this, "This Purchase Order has been paid. Cannot approve.");
            return;
        }
        
        int confirm = JOptionPane.showConfirmDialog(this, 
        "Are you sure you want to approve this Purchase Order?", 
        "Confirm Approve", 
        JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            poTable.setValueAt("Approved", row, 9);
            saveTableToFile();
        }
    
    }//GEN-LAST:event_btnApproveActionPerformed

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        // TODO add your handling code here:
        int row = poTable.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to reject.");
            return;
        }
        
        String currentStatus = poTable.getValueAt(row, 9).toString();
        if (currentStatus.equalsIgnoreCase("Rejected")) {
            JOptionPane.showMessageDialog(this, "This Purchase Order is already rejected.");
            return;
        } else if (currentStatus.equalsIgnoreCase("Approved")) {
            JOptionPane.showMessageDialog(this, "This Purchase Order has been approved. Cannot reject.");
            return;
        } else if (currentStatus.equalsIgnoreCase("Verified")) {
            JOptionPane.showMessageDialog(this, "This Purchase Order has been verified. Cannot reject.");
            return;
        } else if (currentStatus.equalsIgnoreCase("Flagged")) {
            JOptionPane.showMessageDialog(this, "This Purchase Order has been flagged. Cannot reject.");
            return;
        } else if (currentStatus.equalsIgnoreCase("Received")) {
            JOptionPane.showMessageDialog(this, "This Purchase Order has been received. Cannot reject.");
            return;
        } else if (currentStatus.equalsIgnoreCase("Paid")) {
            JOptionPane.showMessageDialog(this, "This Purchase Order has been paid. Cannot reject.");
            return;
        }
        
        int confirm = JOptionPane.showConfirmDialog(this, 
        "Are you sure you want to reject this Purchase Order?", 
        "Confirm Reject", 
        JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            poTable.setValueAt("Rejected", row, 9);
            saveTableToFile();
        }
    }//GEN-LAST:event_btnRejectActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
         this.dispose();
         if (previousComponent != null) {
            previousComponent.setVisible(true);
        }
         
    }//GEN-LAST:event_btnBackActionPerformed

    private void exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMouseClicked
        // TODO add your handling code here:
        this.dispose();
        if (previousComponent != null) {
            previousComponent.setVisible(true);
        }
    }//GEN-LAST:event_exitMouseClicked

    private void comboFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboFilterActionPerformed

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApprove;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnReject;
    private javax.swing.JComboBox<String> comboFilter;
    private javax.swing.JLabel exit;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JTable poTable;
    // End of variables declaration//GEN-END:variables
}
