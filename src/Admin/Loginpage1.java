/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Admin;

import FinanceManager.FinanceManagerPanel;
import InventoryManager.InventoryManagerDashboard;
import PurchaseManager.PM;
import SalesManager.SalesManagerDashboard;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.FocusListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author ELYSHA SOPHIA
 */
public class Loginpage1 extends javax.swing.JFrame {

    private String loggedInIdentifier = ""; // Generalized variable for either EmployeeID or Username
    private boolean loginSuccessful = false; // Persistent across methods
    private boolean accountLocked = false;  // Persistent across methods
    private String position = "";           // Persistent across methods
    private int failedAttempts = 0;         // Persistent across methods

    
    
    public Loginpage1() {
        initComponents();
        
        // Initialize placeholders
        txtEmployeeID.setText("Enter EmployeeID or Username");
        txtEmployeeID.setForeground(Color.gray);
        txtPassword.setText("Enter Password");
        txtPassword.setForeground(Color.gray);

        // Redirect focus elsewhere
        BtnClear.requestFocusInWindow();
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtEmployeeID = new javax.swing.JTextField();
        txtPassword = new javax.swing.JPasswordField();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        BtnSignIn = new javax.swing.JButton();
        BtnClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(242, 239, 231));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 390, -1));

        jPanel2.setBackground(new java.awt.Color(242, 239, 231));
        jPanel2.setToolTipText("");
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(242, 239, 231));
        jLabel1.setFont(new java.awt.Font("Bookman Old Style", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(242, 239, 231));
        jLabel1.setText("X");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 10, 40, 30));

        txtEmployeeID.setBackground(new java.awt.Color(242, 239, 231));
        txtEmployeeID.setFont(new java.awt.Font("Century", 0, 16)); // NOI18N
        txtEmployeeID.setText("Enter EmployeeID or Username");
        txtEmployeeID.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 3, 0, new java.awt.Color(0, 106, 113)));
        txtEmployeeID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtEmployeeIDFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmployeeIDFocusLost(evt);
            }
        });
        txtEmployeeID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmployeeIDActionPerformed(evt);
            }
        });
        jPanel2.add(txtEmployeeID, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 220, 260, 40));

        txtPassword.setBackground(new java.awt.Color(242, 239, 231));
        txtPassword.setFont(new java.awt.Font("Century", 0, 16)); // NOI18N
        txtPassword.setText("password");
        txtPassword.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 3, 0, new java.awt.Color(0, 106, 113)));
        txtPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPasswordFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPasswordFocusLost(evt);
            }
        });
        jPanel2.add(txtPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 310, 260, 40));

        jPanel3.setBackground(new java.awt.Color(242, 239, 231));
        jPanel3.setPreferredSize(new java.awt.Dimension(40, 40));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-password-40.png"))); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 3, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 310, 40, 40));

        jPanel5.setBackground(new java.awt.Color(0, 106, 113));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 390, 50));

        jPanel4.setBackground(new java.awt.Color(242, 239, 231));

        jLabel3.setBackground(new java.awt.Color(0, 51, 102));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-user-40.png"))); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, 40, 40));

        jLabel6.setFont(new java.awt.Font("Bookman Old Style", 0, 36)); // NOI18N
        jLabel6.setText("Welcome!");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 180, -1));

        jLabel7.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 106, 113));
        jLabel7.setText("Login To Your Account");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 120, -1, -1));

        BtnSignIn.setBackground(new java.awt.Color(0, 106, 113));
        BtnSignIn.setFont(new java.awt.Font("Bookman Old Style", 1, 20)); // NOI18N
        BtnSignIn.setForeground(new java.awt.Color(242, 239, 231));
        BtnSignIn.setText("Sign In");
        BtnSignIn.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 2, 1, new java.awt.Color(51, 51, 51)));
        BtnSignIn.setBorderPainted(false);
        BtnSignIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSignInActionPerformed(evt);
            }
        });
        jPanel2.add(BtnSignIn, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 410, 100, 40));

        BtnClear.setBackground(new java.awt.Color(0, 106, 113));
        BtnClear.setFont(new java.awt.Font("Bookman Old Style", 1, 20)); // NOI18N
        BtnClear.setForeground(new java.awt.Color(242, 239, 231));
        BtnClear.setText("Clear");
        BtnClear.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 3, 1, new java.awt.Color(51, 51, 51)));
        BtnClear.setBorderPainted(false);
        BtnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnClearActionPerformed(evt);
            }
        });
        jPanel2.add(BtnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 410, 100, 40));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 390, 530));

        setSize(new java.awt.Dimension(389, 530));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
        System.exit(0); // ✅ Close the application
    }//GEN-LAST:event_jLabel1MouseClicked

    private void txtEmployeeIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmployeeIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmployeeIDActionPerformed

    private void BtnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnClearActionPerformed
        FocusListener txtEmployeeIDFocusLostListener = null;
        // TODO add your handling code here:
        // Remove focus listeners temporarily to avoid triggering events
        txtEmployeeID.removeFocusListener(txtEmployeeIDFocusLostListener);
        FocusListener txtPasswordFocusLostListener = null;
        txtPassword.removeFocusListener(txtPasswordFocusLostListener);

        // Reset fields
        txtEmployeeID.setText("Enter EmployeeID or Username");
        txtEmployeeID.setForeground(Color.gray);
        txtPassword.setText("Enter Password");
        txtPassword.setForeground(Color.gray);

        // Re-add focus listeners
        txtEmployeeID.addFocusListener(txtEmployeeIDFocusLostListener);
        txtPassword.addFocusListener(txtPasswordFocusLostListener);
    }//GEN-LAST:event_BtnClearActionPerformed

    private void BtnSignInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSignInActionPerformed
        // Get and trim input values
        String inputIDOrUsername = txtEmployeeID.getText().trim();
        String pass = String.valueOf(txtPassword.getPassword()).trim();

        // Debug input values
        System.out.println("Input ID/Username: [" + inputIDOrUsername + "]");
        System.out.println("Password Entered: [" + pass + "]");

        if (inputIDOrUsername.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Employee ID/Username field is empty");
            return;
        }
        if (pass.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Password field is empty");
            return;
        }

        // Read and process the user credentials file
        try (BufferedReader reader = new BufferedReader(new FileReader("src/txtFile/user_credentials.txt"))) {
            String line;
            StringBuilder userBuilder = new StringBuilder();

            while ((line = reader.readLine()) != null) {
                if (line.trim().isEmpty()) {
                    // Process the user block
                    if (userBuilder.length() > 0) {
                        processUserBlock(userBuilder, inputIDOrUsername, pass);
                        userBuilder.setLength(0); // Reset for next block
                    }
                } else {
                    userBuilder.append(line).append("\n");
                }

            }

            // Handle the last user block (if the file does not end with an empty line)
            if (userBuilder.length() > 0) {
                processUserBlock(userBuilder, inputIDOrUsername, pass);
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "File read error: " + ex.getMessage());
        }

        // Determine login success
        if (loginSuccessful) {
            loggedInIdentifier = inputIDOrUsername + ":" + position; // Set the logged-in identifier
            System.out.println("Navigating with identifier: " + loggedInIdentifier);

            updateUserAccount(loggedInIdentifier, 0, "Active"); // Reset failed attempts and unlock account
            JOptionPane.showMessageDialog(null, "Login successful");
            
            
        // Dispose the login page before opening the admin page
        this.dispose();

            // Navigate based on position
            navigateToRolePage(position, loggedInIdentifier);
        } else {
            handleLoginFailure(inputIDOrUsername); // Refactored login failure handling
        }
    }
    
        private void processUserBlock(StringBuilder userBuilder, String inputIDOrUsername, String pass) {
        String[] userInfo = userBuilder.toString().trim().split("\\r?\\n");

        // Debug the user block
        System.out.println("Processing user block...");
        for (int i = 0; i < userInfo.length; i++) {
            System.out.println("UserInfo[" + i + "]: " + userInfo[i]);
        }

        if (userInfo.length < 6) {
            System.out.println("Incomplete user block. Skipping...");
            return;
        }

        try {
            String storedEmployeeID = userInfo[0].substring(12).trim(); // "EmployeeID: "
            String storedUsername = userInfo[1].substring(10).trim();   // "Username: "
            String storedPassword = userInfo[2].substring(10).trim();   // "Password: "
            String storedPosition = userInfo[3].substring(10).trim();   // "Position: "
            String storedStatus = userInfo[4].substring(8).trim();      // "Status: "
            int failedAttempts = Integer.parseInt(userInfo[5].substring(15).trim()); // "FailedAttempts: "

            // Debug parsed data
            System.out.println("Parsed EmployeeID: " + storedEmployeeID);
            System.out.println("Parsed Username: " + storedUsername);
            System.out.println("Parsed Password: " + storedPassword);
            System.out.println("Parsed Position: " + storedPosition);
            System.out.println("Parsed Status: " + storedStatus);

            if (inputIDOrUsername.equals(storedEmployeeID) || inputIDOrUsername.equalsIgnoreCase(storedUsername)) {
                if ("Locked".equals(storedStatus)) {
                    accountLocked = true;
                    JOptionPane.showMessageDialog(null, "Account is locked for user: " + storedEmployeeID);
                    return;
                }

                if (pass.equals(storedPassword)) {
                    loginSuccessful = true;
                    position = storedPosition; // Store position for navigation
                    failedAttempts = 0; // Reset failed attempts
                    System.out.println("Login successful for: " + inputIDOrUsername + " with Position: " + storedPosition);
                } else {
                    failedAttempts++;
                    if (failedAttempts >= 3) {
                        accountLocked = true;
                    }
                }
            }
        } catch (HeadlessException | NumberFormatException e) {
            System.out.println("Error processing user block: " + e.getMessage());
        }
    }


        private void navigateToRolePage (String position, String loggedInIdentifier){
             // Debug identifier before navigation
            System.out.println("Navigating to role page with identifier: [" + loggedInIdentifier + "]");

            if (!loggedInIdentifier.contains(":")) {
                JOptionPane.showMessageDialog(null, "Invalid identifier format: " + loggedInIdentifier);
                return; // Stop navigation if format is invalid
            }
            
            switch (position) {
            case "Admin":
                AdminTest adminTest = new AdminTest(loggedInIdentifier);
                openPage(adminTest);
                break;
            case "Sales Manager":
                SalesManagerDashboard salesPage = new SalesManagerDashboard(loggedInIdentifier);
                openPage(salesPage);
                break;
            case "Purchase Manager":
                PM purchasePage = new PM(loggedInIdentifier);
                openPage(purchasePage);
                break;
            case "Inventory Manager":
                InventoryManagerDashboard inventoryPage = new InventoryManagerDashboard(loggedInIdentifier);
                openPage(inventoryPage);
                break;
            case "Finance Manager":
                FinanceManagerPanel financePage = new FinanceManagerPanel(loggedInIdentifier);
                openPage(financePage);
                break;
            default:
                System.out.println("Unexpected position value: " + position);
                JOptionPane.showMessageDialog(null, "Invalid position: " + position);
                break;
        }
    }

    private void openPage (JFrame page) {
        page.setVisible(true);
        page.pack();
        page.setLocationRelativeTo(null);
        page.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }    

    private void handleLoginFailure(String inputIDOrUsername) {
    JOptionPane.showMessageDialog(null, "Invalid login attempt for: " + inputIDOrUsername);

        // Increment failed attempts in the credentials file
        try {
            File inputFile = new File("src/txtFile/user_credentials.txt");
            File tempFile = new File("src/txtFile/user_credentials_temp.txt");

            try (BufferedReader reader = new BufferedReader(new FileReader(inputFile));
                 BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {
                String line;

                while ((line = reader.readLine()) != null) {
                    if (line.trim().isEmpty()) {
                        writer.newLine();
                        continue;
                    }

                    if ((line.startsWith("EmployeeID: ") && line.substring(12).trim().equals(inputIDOrUsername)) ||
                        (line.startsWith("Username: ") && line.substring(10).trim().equalsIgnoreCase(inputIDOrUsername))) {

                        writer.write(line); // Write EmployeeID or Username line
                        writer.newLine();
                        writer.write(reader.readLine()); // Username line
                        writer.newLine();
                        writer.write(reader.readLine()); // Password line
                        writer.newLine();
                        writer.write(reader.readLine()); // Position line
                        writer.newLine();

                        String statusLine = reader.readLine(); // Status line
                        String failedAttemptsLine = reader.readLine(); // FailedAttempts line

                        int failedAttempts = Integer.parseInt(failedAttemptsLine.substring(15).trim());
                        failedAttempts++; // Increment failed attempts

                        if (failedAttempts >= 3) {
                            writer.write("Status: Locked");
                            JOptionPane.showMessageDialog(null, "Account locked due to too many failed attempts.");
                        } else {
                            writer.write(statusLine); // Write Status line
                        }
                        writer.newLine();
                        writer.write("FailedAttempts: " + failedAttempts); // Update FailedAttempts
                        writer.newLine();
                    } else {
                        writer.write(line); // Preserve other lines
                        writer.newLine();
                    }
                }
            }

            // Replace the original file with the updated file
            if (!inputFile.delete() || !tempFile.renameTo(inputFile)) {
                JOptionPane.showMessageDialog(null, "File update error.");
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "File write error: " + ex.getMessage());
        }
    }

    
        private void updateUserAccount(String identifier, int failedAttempts, String status) {
            File inputFile = new File("src/txtFile/user_credentials.txt");
            File tempFile = new File("src/txtFile/user_credentials_temp.txt");

            try (BufferedReader reader = new BufferedReader(new FileReader(inputFile));
                 BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    if (line.trim().isEmpty()) {
                        writer.newLine();
                        continue;
                    }

                    // Check for matching EmployeeID or Username
                    if ((line.startsWith("EmployeeID: ") && line.substring(12).trim().equals(identifier)) ||
                        (line.startsWith("Username: ") && line.substring(10).trim().equals(identifier))) {

                        writer.write(line); // Write EmployeeID or Username line
                        writer.newLine();
                        writer.write(reader.readLine()); // Write Username line (if already on EmployeeID line, next is Username line)
                        writer.newLine();
                        writer.write(reader.readLine()); // Password line
                        writer.newLine();
                        writer.write(reader.readLine()); // Role line
                        writer.newLine();
                        writer.write("Status: " + status); // Update Status line
                        writer.newLine();
                        writer.write("FailedAttempts: " + failedAttempts); // Update FailedAttempts line
                        writer.newLine();

                        // Skip the original Status and FailedAttempts lines
                        reader.readLine(); 
                        reader.readLine(); 
                    } else {
                        writer.write(line); // Write EmployeeID or Username line
                        writer.newLine();
                        writer.write(reader.readLine()); // Write Username line
                        writer.newLine();
                        writer.write(reader.readLine()); // Write Password line
                        writer.newLine();
                        writer.write(reader.readLine()); // Write Role line
                        writer.newLine();
                        writer.write(reader.readLine()); // Write Status line
                        writer.newLine();
                        writer.write(reader.readLine()); // Write FailedAttempts line
                        writer.newLine();
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "File write error: " + ex.getMessage());
            }

            // Replace the old file with the updated one
            if (!inputFile.delete() || !tempFile.renameTo(inputFile)) {
                JOptionPane.showMessageDialog(null, "File update error.");
            }
    }//GEN-LAST:event_BtnSignInActionPerformed

    
    private void txtEmployeeIDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmployeeIDFocusGained
        // TODO add your handling code here:
        if (txtEmployeeID.getText().equals("Enter EmployeeID or Username"))
        {
            txtEmployeeID.setText("");
            txtEmployeeID.setForeground(Color.black);
        }
        
        System.out.println("FocusGained triggered.");
        
    }//GEN-LAST:event_txtEmployeeIDFocusGained

    
    private void txtEmployeeIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmployeeIDFocusLost
        // TODO add your handling code here:
        if (txtEmployeeID.getText().equals(""))
        {
            txtEmployeeID.setText("Enter EmployeeID or Username");
            txtEmployeeID.setForeground(Color.gray);
        }
        
        System.out.println("FocusLost triggered.");
    }//GEN-LAST:event_txtEmployeeIDFocusLost

    private void txtPasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPasswordFocusGained
        // TODO add your handling code here:
        if (txtPassword.getText().equals("Enter Password")) {
            txtPassword.setText(""); // Clear the placeholder
            txtPassword.setForeground(Color.black); // Normal text color
        }
    }//GEN-LAST:event_txtPasswordFocusGained

    private void txtPasswordFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPasswordFocusLost
        // TODO add your handling code here:
        if (txtPassword.getText().isEmpty()) {
            txtPassword.setText("Enter Password"); // Restore placeholder
            txtPassword.setForeground(Color.gray); // Placeholder color
        }
    }//GEN-LAST:event_txtPasswordFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnClear;
    private javax.swing.JButton BtnSignIn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTextField txtEmployeeID;
    private javax.swing.JPasswordField txtPassword;
    // End of variables declaration//GEN-END:variables

   

    
}
