/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Admin;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import system.AdminTest;
import system.EditEmployeeForm;
import system.Registerpage1;
import system.userAccForm;

/**
 *
 * @author ELYSHA SOPHIA
 */
public class AdminPage extends javax.swing.JFrame {

    
    private String employeeID;
    private String position;

    public AdminPage(String identifier) {
        String[] parts = identifier.split(":");
        if (parts.length == 2) {
            this.employeeID = parts[0];
            this.position = parts[1];
        } else {
            this.employeeID = "Unknown";
            this.position = "Unknown";
            System.out.println("Error: LoggedInIdentifier has an unexpected format: [" + identifier + "]");
        }
        System.out.println("EmployeeID: " + employeeID);
        System.out.println("Position: " + position);
        
        initComponents();
        loadUserData();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        headerPanel = new javax.swing.JPanel();
        btnMenu = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnCheck = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUserData = new javax.swing.JTable();
        btnRefresh = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblUpdate = new javax.swing.JLabel();

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setUndecorated(true);

        mainPanel.setBackground(new java.awt.Color(231, 240, 220));
        mainPanel.setForeground(new java.awt.Color(255, 255, 255));
        mainPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        headerPanel.setBackground(new java.awt.Color(89, 116, 69));

        btnMenu.setBackground(new java.awt.Color(255, 204, 102));
        btnMenu.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        btnMenu.setForeground(new java.awt.Color(32, 52, 15));
        btnMenu.setText("Menu");
        btnMenu.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 2, 1, new java.awt.Color(0, 0, 0)));
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(32, 52, 15));
        btnAdd.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(231, 240, 220));
        btnAdd.setText("Add Employee");
        btnAdd.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 2, 1, new java.awt.Color(0, 0, 0)));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setBackground(new java.awt.Color(32, 52, 15));
        btnEdit.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnEdit.setForeground(new java.awt.Color(231, 240, 220));
        btnEdit.setText("Edit Employee");
        btnEdit.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 2, 1, new java.awt.Color(0, 0, 0)));
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(32, 52, 15));
        btnDelete.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(231, 240, 220));
        btnDelete.setText("Delete Employee");
        btnDelete.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 2, 1, new java.awt.Color(0, 0, 0)));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnCheck.setBackground(new java.awt.Color(32, 52, 15));
        btnCheck.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnCheck.setForeground(new java.awt.Color(231, 240, 220));
        btnCheck.setText("User Credentials");
        btnCheck.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 2, 1, new java.awt.Color(0, 0, 0)));
        btnCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckActionPerformed(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-add-administrator-30.png"))); // NOI18N

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-edit-account-30.png"))); // NOI18N

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-denied-30.png"))); // NOI18N

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-to-do-30 (1).png"))); // NOI18N

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headerPanelLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                            .addComponent(btnCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btnMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(btnMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEdit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCheck, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(303, 303, 303))
        );

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(32, 52, 15));
        jLabel3.setText("Employee Management Page!");

        tblUserData.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(51, 51, 51)));
        tblUserData.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        tblUserData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "EmployeeID", "Username", "Password", "Fullname", "Phone No.", "Gender", "Position", "Department"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblUserData);

        btnRefresh.setBackground(new java.awt.Color(32, 52, 15));
        btnRefresh.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnRefresh.setForeground(new java.awt.Color(231, 240, 220));
        btnRefresh.setText("Refresh");
        btnRefresh.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 2, 1, new java.awt.Color(0, 0, 0)));
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Bookman Old Style", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(32, 52, 15));
        jLabel1.setText("X");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        lblUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-update-30.png"))); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addComponent(headerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 254, Short.MAX_VALUE)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                                .addComponent(lblUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(14, 14, 14))))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 892, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUpdate)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(26, 26, 26)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
            .addComponent(headerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // Dispose the AdminPage frame
        this.dispose();

        // Open AdminTest frame
        AdminTest adminTest = new AdminTest("exampleIdentifier:Position"); // Pass identifier to AdminTest
        adminTest.setVisible(true);
        adminTest.pack();
        adminTest.setLocationRelativeTo(null);
        adminTest.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }//GEN-LAST:event_jLabel1MouseClicked

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        this.dispose();
        
        Registerpage1 frameText = new Registerpage1("exampleIdentifier:Position");
        frameText.setVisible(true);
        frameText.pack();
        frameText.setLocationRelativeTo(null);
        frameText.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_btnAddActionPerformed

    
    
    // Method to load user data from text file and populate the JTable
        private void loadUserData() {
            String credentialsFilePath = "user_credentials.txt";
            String employeeDataFilePath = "Employee_data.txt";

            try (BufferedReader credentialsReader = new BufferedReader(new FileReader(credentialsFilePath))) {
                String line;
                DefaultTableModel model = (DefaultTableModel) tblUserData.getModel();

                // Ensure table columns are set
                String[] columnNames = {"Employee ID", "Username", "Password", "Fullname", "Phone", "Gender", "Position", "Department"};
                model.setColumnIdentifiers(columnNames);

                while ((line = credentialsReader.readLine()) != null) {
                    if (line.startsWith("EmployeeID: ")) {
                        String employeeID = line.substring(12).trim();
                        System.out.println("Processing EmployeeID: " + employeeID);

                        // Read username
                        line = credentialsReader.readLine(); 
                        String username = line != null && line.startsWith("Username: ") ? line.substring(10).trim() : "";

                        // Read password
                        line = credentialsReader.readLine();
                        String password = line != null && line.startsWith("Password: ") ? line.substring(10).trim() : "";

                        // Retrieve employee data from Employee_data.txt
                        Employee employee = getEmployeeData(employeeID, employeeDataFilePath);

                        if (employee != null) {
                            System.out.println("Adding row for EmployeeID: " + employeeID);
                            model.addRow(new Object[]{
                                employeeID,
                                username,
                                password,
                                employee.getFullname(),
                                employee.getPhoneno(),
                                employee.getGender(),
                                employee.getPosition(),
                                employee.getDepartment()
                            });
                        } else {
                            System.out.println("No employee data found for EmployeeID: " + employeeID);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error loading user data: " + ex.getMessage());
            }
        }

        // Method to parse employee data from the formatted string
        private Employee parseEmployeeData(String employeeBlock) {
        String[] lines = employeeBlock.split("\n");
        String employeeID = "", fullname = "", phoneNo = "", gender = "", position = "", department = "";

        for (String line : lines) {
            if (line.startsWith("EmployeeID: ")) {
                employeeID = line.substring(12).trim();
            } else if (line.startsWith("Fullname: ")) {
                fullname = line.substring(9).trim();
            } else if (line.startsWith("Phone No: ")) {
                phoneNo = line.substring(10).trim();
            } else if (line.startsWith("Gender: ")) {
                gender = line.substring(8).trim();
            } else if (line.startsWith("Position: ")) {
                position = line.substring(10).trim();
            } else if (line.startsWith("Department: ")) {
                department = line.substring(12).trim();
            }
        }

        // Return an Employee object with the parsed data
        return new Employee(employeeID, fullname, phoneNo, gender, position, department);
    }

    private Employee getEmployeeData(String identifier, String employeeDataFilePath) {
        try (BufferedReader employeeReader = new BufferedReader(new FileReader(employeeDataFilePath))) {
        String line;
        StringBuilder sb = new StringBuilder();
        boolean found = false;

        while ((line = employeeReader.readLine()) != null) {
            // Check for matching EmployeeID or Username
            if (line.startsWith("EmployeeID: ")) {
                String employeeID = line.substring(12).trim();
                if (employeeID.equals(identifier)) {
                    found = true;
                } else {
                    found = false;
                    sb.setLength(0); // Clear buffer if no match
                }
            } else if (line.startsWith("Username: ")) {
                String username = line.substring(10).trim();
                if (username.equals(identifier)) {
                    found = true;
                } else if (!found) {
                    sb.setLength(0); // Clear buffer if no match
                }
            }

            // Append lines from a matching block
            if (found) {
                sb.append(line).append("\n");
                if (line.isEmpty()) { // End of block
                    break;
                }
            }
        }

        if (found) {
            System.out.println("Employee data found for identifier: " + identifier);
            return parseEmployeeData(sb.toString()); // Parse and return the employee object
        }
    } catch (IOException ex) {
        JOptionPane.showMessageDialog(null, "Error reading employee data: " + ex.getMessage());
    }

    return null; // Return null if no match is found
    }


    // Employee class to hold employee data
        class Employee {
        private String employeeID;
        private String fullname;
        private String phoneno;
        private String gender;
        private String position;
        private String department;

        // Constructor
        public Employee(String employeeID, String fullname, String phoneno, String gender, String position, String department) {
            this.employeeID = employeeID;
            this.fullname = fullname;
            this.phoneno = phoneno;
            this.gender = gender;
            this.position = position;
            this.department = department;
        }

        // Getters
        public String getEmployeeID() { return employeeID; }
        public String getFullname() { return fullname; }
        public String getPhoneno() { return phoneno; }
        public String getGender() { return gender; }
        public String getPosition() { return position; }
        public String getDepartment() { return department; }
    }
    
    
    public static void AddRowToJTable(Object[] dataRow){
        DefaultTableModel model = (DefaultTableModel)tblUserData.getModel();
        model.addRow(dataRow);
    }
    
    
    
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblUserData.getSelectedRow();
        if (selectedRow != -1) {
            //close the adminPage
            this.dispose();
            // Retrieve identifier (can be EmployeeID or Username)
            String identifier = (String) tblUserData.getValueAt(selectedRow, 0);
            EditEmployeeForm frameText = new EditEmployeeForm(identifier); // Pass identifier to EditEmployeeForm
            frameText.setVisible(true);
            frameText.pack();
            frameText.setLocationRelativeTo(null);
            frameText.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        } else {
            JOptionPane.showMessageDialog(null, "Please select an employee to edit");
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        // Get the selected row index
        int selectedRow = tblUserData.getSelectedRow();

        if (selectedRow >= 0) {
            // Assuming Identifier (EmployeeID or Username) is in the first column (index 0)
            String identifier = (String) tblUserData.getValueAt(selectedRow, 0);

            // Confirm deletion
            int response = JOptionPane.showConfirmDialog(null, 
                "Are you sure you want to delete user with Identifier: " + identifier + "?", 
                "Confirm Deletion", 
                JOptionPane.YES_NO_OPTION, 
                JOptionPane.WARNING_MESSAGE);

            if (response == JOptionPane.YES_OPTION) {
                // Remove the user from the data source
                boolean success = removeUserFromDataSource(identifier);

                if (success) {
                    // Remove the row from the table
                    DefaultTableModel model = (DefaultTableModel) tblUserData.getModel();
                    model.removeRow(selectedRow);
                    JOptionPane.showMessageDialog(null, "A user was deleted successfully.");
                } else {
                    JOptionPane.showMessageDialog(null, "Error deleting user. Please try again.");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "No user selected. Please select a user to delete.");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    // This function removes the user from the underlying data source, e.g., a text file or database
    private boolean removeUserFromDataSource(String identifier) {
        boolean userFoundInEmployeeData = removeUserFromFile(identifier, "Employee_data.txt");
        boolean userFoundInCredentials = removeUserFromFile(identifier, "user_credentials.txt");

        return userFoundInEmployeeData && userFoundInCredentials;
    }

    private boolean removeUserFromFile(String identifier, String fileName) {
        File inputFile = new File(fileName);
        File tempFile = new File("temp_" + fileName);

        try (BufferedReader reader = new BufferedReader(new FileReader(inputFile));
             BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {

            String currentLine;
            boolean userFound = false;

            while ((currentLine = reader.readLine()) != null) {
                String trimmedLine = currentLine.trim();

                // Check if this is the user's data based on Identifier (EmployeeID or Username)
                if (trimmedLine.startsWith("EmployeeID: " + identifier) || trimmedLine.startsWith("Username: " + identifier)) {
                    userFound = true;
                    // Skip lines related to this user
                    while ((currentLine = reader.readLine()) != null && !currentLine.trim().isEmpty()) {
                        // Continue skipping this user’s information
                    }
                } else {
                    writer.write(currentLine + System.lineSeparator());
                }
            }

            writer.close();
            reader.close();

            if (userFound) {
                // Delete the original file and rename the temp file to the original file's name
                if (!inputFile.delete()) {
                    System.out.println("Could not delete file: " + inputFile.getName());
                }
                if (!tempFile.renameTo(inputFile)) {
                    System.out.println("Could not rename file to: " + inputFile.getName());
                }
            } else {
                // If the user wasn't found, delete the temp file
                if (!tempFile.delete()) {
                    System.out.println("Could not delete temporary file: " + tempFile.getName());
                }
            }

            return userFound;

        } catch (IOException ex) {
            ex.printStackTrace();
            return false;
        }
    }
    private void btnCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckActionPerformed
        // TODO add your handling code here:
        this.dispose();
        
        userAccForm frameText = new userAccForm("exampleIdentifier:Position");
        frameText.setVisible(true);
        frameText.pack();
        frameText.setLocationRelativeTo(null);
        frameText.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

    }//GEN-LAST:event_btnCheckActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        // Your code to reload or refresh employee data
        DefaultTableModel model = (DefaultTableModel) tblUserData.getModel();
        model.setRowCount(0); // Clear existing rows
        loadUserData(); // Method to reload the employee data
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuActionPerformed

        // Dispose the AdminPage frame
        this.dispose();

        // Open AdminTest frame
        AdminTest adminTest = new AdminTest("exampleIdentifier:Position"); // Pass identifier to AdminTest
        adminTest.setVisible(true);
        adminTest.pack();
        adminTest.setLocationRelativeTo(null);
        adminTest.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }//GEN-LAST:event_btnMenuActionPerformed

    
   

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new Loginpage1().setVisible(true);
                //new registerForm().setVisible(true);
                //new EmployeePage().setVisible(true);
                //new HRPage().setVisible(true);
                //new EditEmployeeForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCheck;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnMenu;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblUpdate;
    private javax.swing.JPanel mainPanel;
    private static javax.swing.JTable tblUserData;
    // End of variables declaration//GEN-END:variables
}
